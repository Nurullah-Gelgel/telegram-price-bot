import requests
from bs4 import BeautifulSoup
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.update import Update
import schedule
import time
import threading
from db import   favori_urun_ekle_db, favorileri_goster_db, favori_sil_db, tum_favori_urunleri_getir
from scrapper import PriceScraper, fiyat_cek
from config import (
    TELEGRAM_API_TOKEN, 
    PRICE_CHECK_INTERVAL,
    LOGGING_CONFIG,
    TELEGRAM_GROUP_ID
)
import logging

# Logging ayarlarƒ±nƒ± g√ºncelle
logging.basicConfig(**LOGGING_CONFIG)
logger = logging.getLogger(__name__)

def fiyat_kontrolu(urun_link):
    yeni_fiyat, urun_id = fiyat_cek(urun_link)  
    
    if yeni_fiyat is None:
        return None, urun_id

    return yeni_fiyat, urun_id   

from db import favori_urun_ekle_db, favorileri_goster_db, favori_sil_db, tum_favori_urunleri_getir, favori_fiyat_guncelle_db

def fiyat_guncelle(context: CallbackContext):
    """Favori √ºr√ºnlerin fiyatlarƒ±nƒ± g√ºncelle ve deƒüi≈üiklik varsa bildirim g√∂nder."""
    tum_favoriler = tum_favori_urunleri_getir()
    guncellenen_urun_sayisi = 0
    
    for urun in tum_favoriler:
        kullanici_id, urun_id, urun_link, mevcut_fiyat = urun
        yeni_fiyat, _ = fiyat_kontrolu(urun_link)
        
        if yeni_fiyat is not None and yeni_fiyat != mevcut_fiyat:
            guncellenen_urun_sayisi += 1
            # Sadece fiyat d√º≈üt√ºƒü√ºnde bildirim g√∂nder
            if yeni_fiyat < mevcut_fiyat:
                fiyat_degisimi = mevcut_fiyat - yeni_fiyat
                indirim_yuzdesi = (fiyat_degisimi/mevcut_fiyat)*100
                
                # Mesajlarƒ± kƒ±salt ve URL'yi markdown formatƒ±nda g√∂nder
                kullanici_mesaji = (
                    f"üîî Fiyat D√º≈ü√º≈ü√º\n"
                    f"[√úr√ºne Git]({urun_link})\n"
                    f"üí∞ Eski: {mevcut_fiyat:.2f} TL\n"
                    f"üìâ Yeni: {yeni_fiyat:.2f} TL\n"
                    f"üí´ ƒ∞ndirim: {fiyat_degisimi:.2f} TL (%{indirim_yuzdesi:.1f})"
                )
                
                grup_mesaji = (
                    f"üîî Fiyat D√º≈ü√º≈ü√º\n"
                    f"[√úr√ºne Git]({urun_link})\n"
                    f"üí∞ Eski: {mevcut_fiyat:.2f} TL\n"
                    f"üìâ Yeni: {yeni_fiyat:.2f} TL\n"
                    f"üí´ ƒ∞ndirim: {fiyat_degisimi:.2f} TL (%{indirim_yuzdesi:.1f})"
                )
                
                try:
                    # Mesaj g√∂nderirken disable_web_page_preview ekle
                    context.bot.send_message(
                        chat_id=kullanici_id,
                        text=kullanici_mesaji,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    
                    context.bot.send_message(
                        chat_id=TELEGRAM_GROUP_ID,
                        text=grup_mesaji,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    logger.info(f"Fiyat d√º≈ü√º≈ü√º bildirimi g√∂nderildi - Kullanƒ±cƒ±: {kullanici_id}, √úr√ºn: {urun_link}")
                except Exception as e:
                    logger.error(f"Bildirim g√∂nderme hatasƒ±: {str(e)}")
            
            # Fiyatƒ± veritabanƒ±nda g√ºncelle
            favori_fiyat_guncelle_db(kullanici_id, urun_id, yeni_fiyat)
    
    # G√ºncelleme sonucunu bildir
    if hasattr(context, 'job'):
        return  # Otomatik g√ºncelleme ise mesaj g√∂nderme
        
    if context.bot:
        context.bot.send_message(
            chat_id=kullanici_id,
            text=f"‚úÖ Fiyat g√ºncellemesi tamamlandƒ±.\nüìä {guncellenen_urun_sayisi} √ºr√ºnde deƒüi≈üiklik tespit edildi.",
            parse_mode='Markdown'
        )

def start(update: Update, context: CallbackContext):
    """Botun ba≈ülangƒ±√ß mesajƒ±"""
    update.message.reply_text('Merhaba! Bu bot ile favori √ºr√ºnlerinizin fiyatlarƒ±nƒ± takip edebilirsiniz.')

def help_command(update: Update, context: CallbackContext):
    """Kullanƒ±cƒ±ya yardƒ±m mesajƒ± g√∂nder"""
    help_text = (
        "Bu botun kullanabileceƒüiniz komutlar:\n\n"
        "üì¶ **/favori_ekle [√ºr√ºn_linki]** - √úr√ºn favorilere ekle\n"
        "üìã **/favoriler** - Favori √ºr√ºnleri g√∂ster\n"
        #"üìã **/tum_favoriler** - T√ºm favori √ºr√ºnleri g√∂ster\n"
        "üóëÔ∏è **/favori_sil [√ºr√ºn_linki]** - √úr√ºn favorilerden sil (√ºr√ºn linkini kullanarak silin)\n"
  #      "üîÑ **/fiyat_guncelle** - Fiyatlarƒ± g√ºncelle\n\n"
        "üîç **Olasƒ± sorunlar:**\n"
        "Eƒüer bir √ºr√ºn√ºn fiyatƒ± doƒüru ≈üekilde alƒ±nmƒ±yorsa, l√ºtfen √ºr√ºn linkini kontrol edin veya tekrar deneyin."
    )
    update.message.reply_text(help_text)

def favori_ekle(update: Update, context: CallbackContext):
    """Favori √ºr√ºn√º ekle ve fiyat g√ºncelleme i≈üini ba≈ülat"""
    try:
        if not update or not update.message:
            logger.error("Update veya message objesi bulunamadƒ±")
            return

        kullanici_id = update.message.chat.id
        if len(context.args) < 1:
            update.message.reply_text("L√ºtfen √ºr√ºn linkini belirtin.")
            return

        urun_link = context.args[0]
        
        # Desteklenen site kontrol√º
        scraper = PriceScraper()
        scraper_instance = scraper.factory.get_scraper(urun_link)
        if not scraper_instance:
            supported_sites = ", ".join(scraper.get_supported_sites())
            update.message.reply_text(
                f"‚ùå Bu site desteklenmiyor.\nDesteklenen siteler: {supported_sites}"
            )
            return
        
        # Fiyat kontrol√º ve alma i≈ülemi
        yeni_fiyat, urun_id = fiyat_cek(urun_link)
        
        if yeni_fiyat is None:
            update.message.reply_text("Fiyat bilgisi alƒ±namadƒ±. L√ºtfen √ºr√ºn linkini kontrol edin.")
            return
        
        # Favori √ºr√ºn√º veritabanƒ±na ekleyin
        favori_urun_ekle_db(kullanici_id, urun_id, urun_link, yeni_fiyat)
        
        # Site adƒ±nƒ± scraper'dan al
        site_adi = scraper_instance.get_site_name()
        update.message.reply_text(
            f"‚úÖ **{site_adi} √úr√ºn√º Eklendi**:\n"
            f"üîó **√úr√ºn Linki**: ({urun_link})\n"
            f"üí∞ **Mevcut Fiyat**: {yeni_fiyat} TL"
        )
    except Exception as e:
        logger.error(f"Favori ekleme hatasƒ±: {str(e)}")
        if update and update.message:
            update.message.reply_text("Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.")

def favoriler(update: Update, context: CallbackContext):
    """Favori √ºr√ºnleri g√∂ster"""
    kullanici_id = update.message.chat.id
    favoriler_listesi = favorileri_goster_db(kullanici_id)
    if favoriler_listesi:
        mesaj = "üìã **Favori √úr√ºnleriniz**:\n"
        for urun in favoriler_listesi:
            mesaj += (
                f"üîó **√úr√ºn Linki**: ({urun[2]})\n"
                f"üí∞ **Mevcut Fiyat**: {urun[3]} TL\n\n"
            )
        update.message.reply_text(mesaj)
    else:
        update.message.reply_text("üö´ Favori √ºr√ºn listeniz bo≈ü.")

def tum_favori_urunler(update: Update, context: CallbackContext):
    """T√ºm favori √ºr√ºnleri g√∂ster"""
    tum_favoriler = tum_favori_urunleri_getir()
    if tum_favoriler:
        mesaj = "üìã **T√ºm Favori √úr√ºnler**:\n"
        for urun in tum_favoriler:
            mesaj += (
                f"üîó **√úr√ºn Linki**: ({urun[2]})\n"
                f"üí∞ **Mevcut Fiyat**: {urun[3]} TL\n\n"
            )
        update.message.reply_text(mesaj)
    else:
        update.message.reply_text(" Hi√ß favori √ºr√ºn bulunamadƒ±.")

def favori_sil(update: Update, context: CallbackContext):
    """Favori √ºr√ºn√º sil"""
    kullanici_id = update.message.chat.id
    if len(context.args) < 1:
        update.message.reply_text("L√ºtfen silmek istediƒüiniz √ºr√ºn linkini belirtin.")
        return
    
    urun_link = context.args[0]
    urun_id = urun_link.split('/')[-1]  # √úr√ºn ID'sini linkten √ßƒ±kar
    favori_sil_db(kullanici_id, urun_id)
    update.message.reply_text(f"‚úÖ **Favori √úr√ºn Silindi**:\nüîó **√úr√ºn Linki**: ({urun_link})")

def fiyat_guncelle_thread():
    """Fiyat g√ºncellemelerini belirli bir aralƒ±kta kontrol et"""
    while True:
        schedule.run_pending()
        time.sleep(1)

def test_group(update: Update, context: CallbackContext):
    """Test mesajƒ± g√∂nder ve chat ID'yi logla"""
    chat_id = update.message.chat_id
    logger.info(f"Current chat ID: {chat_id}")
    update.message.reply_text(f"Bu sohbetin ID'si: {chat_id}")

def main():
    """Botun ana fonksiyonu"""
    updater = Updater(TELEGRAM_API_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("favori_ekle", favori_ekle))
    dp.add_handler(CommandHandler("favoriler", favoriler))
    dp.add_handler(CommandHandler("tum_favoriler", tum_favori_urunler))
    dp.add_handler(CommandHandler("favori_sil", favori_sil))
    dp.add_handler(CommandHandler("test_group", test_group))
    dp.add_handler(CommandHandler("fiyat_guncelle", fiyat_guncelle))

    # Fiyat g√ºncellemelerini config'den al
    updater.job_queue.run_repeating(fiyat_guncelle, interval=PRICE_CHECK_INTERVAL, first=0)

    # Fiyat g√ºncellemelerini kontrol eden thread ba≈ülat
    threading.Thread(target=fiyat_guncelle_thread, daemon=True).start()

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()